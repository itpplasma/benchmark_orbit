#!/usr/bin/env python3
"""
Plot particle orbits from netCDF files generated by trace_orbit.py
Creates top, front, left, and 3D views and saves to plot/ directory.
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import xarray as xr
import os
import sys
import glob
from datetime import datetime

def plot_orbit_views(ds, output_dir="plot", filename_prefix=None):
    """
    Create four views of the orbit: top, front, left, and 3D.
    
    Parameters:
    -----------
    ds : xarray.Dataset
        Orbit data from trace_orbit.py
    output_dir : str
        Directory to save plots
    filename_prefix : str
        Prefix for output filenames
    """
    
    os.makedirs(output_dir, exist_ok=True)
    
    # Get timestamp for filename
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    if filename_prefix is None:
        filename_prefix = f"orbit_plot_{timestamp}"
    
    # Check if we have multiple orbits
    if 'orbit' in ds.dims:
        # Multiple orbits
        n_orbits = ds.sizes['orbit']
        print(f"Plotting {n_orbits} orbits")
        
        # Convert cylindrical to Cartesian coordinates for all orbits
        X = ds.R * np.cos(ds.phi_vmec)  # X = R * cos(phi)
        Y = ds.R * np.sin(ds.phi_vmec)  # Y = R * sin(phi)
        Z = ds.Z                        # Z = Z
        
        # Create color map for different orbits
        colors = plt.cm.viridis(np.linspace(0, 1, n_orbits))
        
    else:
        # Single orbit
        n_orbits = 1
        print("Plotting single orbit")
        
        # Convert cylindrical to Cartesian coordinates
        X = ds.R * np.cos(ds.phi_vmec)
        Y = ds.R * np.sin(ds.phi_vmec)
        Z = ds.Z
        
        colors = ['blue']
    
    # Create 2x2 subplot layout
    fig = plt.figure(figsize=(16, 12))
    
    # 1. Top view (X-Y plane, looking down along Z)
    ax1 = plt.subplot(2, 2, 1)
    if n_orbits > 1:
        for i in range(n_orbits):
            ax1.plot(X[i], Y[i], color=colors[i], alpha=0.7, linewidth=1, 
                    label=f'Orbit {i+1}' if n_orbits <= 10 else None)
    else:
        ax1.plot(X, Y, color=colors[0], linewidth=2)
        ax1.plot(X[0], Y[0], 'go', markersize=8, label='Start')
        ax1.plot(X[-1], Y[-1], 'ro', markersize=8, label='End')
    
    ax1.set_xlabel('X [cm]')
    ax1.set_ylabel('Y [cm]')
    ax1.set_title('Top View (X-Y plane)')
    ax1.grid(True, alpha=0.3)
    ax1.set_aspect('equal')
    if n_orbits == 1:
        ax1.legend()
    
    # 2. Front view (X-Z plane, looking along Y)
    ax2 = plt.subplot(2, 2, 2)
    if n_orbits > 1:
        for i in range(n_orbits):
            ax2.plot(X[i], Z[i], color=colors[i], alpha=0.7, linewidth=1)
    else:
        ax2.plot(X, Z, color=colors[0], linewidth=2)
        ax2.plot(X[0], Z[0], 'go', markersize=8, label='Start')
        ax2.plot(X[-1], Z[-1], 'ro', markersize=8, label='End')
    
    ax2.set_xlabel('X [cm]')
    ax2.set_ylabel('Z [cm]')
    ax2.set_title('Front View (X-Z plane)')
    ax2.grid(True, alpha=0.3)
    ax2.set_aspect('equal')
    if n_orbits == 1:
        ax2.legend()
    
    # 3. Left view (Y-Z plane, looking along X)
    ax3 = plt.subplot(2, 2, 3)
    if n_orbits > 1:
        for i in range(n_orbits):
            ax3.plot(Y[i], Z[i], color=colors[i], alpha=0.7, linewidth=1)
    else:
        ax3.plot(Y, Z, color=colors[0], linewidth=2)
        ax3.plot(Y[0], Z[0], 'go', markersize=8, label='Start')
        ax3.plot(Y[-1], Z[-1], 'ro', markersize=8, label='End')
    
    ax3.set_xlabel('Y [cm]')
    ax3.set_ylabel('Z [cm]')
    ax3.set_title('Left View (Y-Z plane)')
    ax3.grid(True, alpha=0.3)
    ax3.set_aspect('equal')
    if n_orbits == 1:
        ax3.legend()
    
    # 4. 3D view
    ax4 = fig.add_subplot(2, 2, 4, projection='3d')
    if n_orbits > 1:
        for i in range(n_orbits):
            ax4.plot(X[i], Y[i], Z[i], color=colors[i], alpha=0.7, linewidth=1)
            # Mark start point
            ax4.scatter(X[i, 0], Y[i, 0], Z[i, 0], color=colors[i], s=50, marker='o')
    else:
        ax4.plot(X, Y, Z, color=colors[0], linewidth=2)
        ax4.scatter(X[0], Y[0], Z[0], color='green', s=100, marker='o', label='Start')
        ax4.scatter(X[-1], Y[-1], Z[-1], color='red', s=100, marker='s', label='End')
    
    ax4.set_xlabel('X [cm]')
    ax4.set_ylabel('Y [cm]')
    ax4.set_zlabel('Z [cm]')
    ax4.set_title('3D View')
    if n_orbits == 1:
        ax4.legend()
    
    # Set equal aspect ratio for 3D plot
    max_range = np.array([X.max()-X.min(), Y.max()-Y.min(), Z.max()-Z.min()]).max() / 2.0
    mid_x = (X.max()+X.min()) * 0.5
    mid_y = (Y.max()+Y.min()) * 0.5
    mid_z = (Z.max()+Z.min()) * 0.5
    ax4.set_xlim(mid_x - max_range, mid_x + max_range)
    ax4.set_ylim(mid_y - max_range, mid_y + max_range)
    ax4.set_zlim(mid_z - max_range, mid_z + max_range)
    
    # Add overall title with orbit info
    if hasattr(ds, 'attrs') and 'vmec_file' in ds.attrs:
        vmec_name = os.path.basename(ds.attrs['vmec_file'])
    else:
        vmec_name = "Unknown VMEC"
    
    if n_orbits > 1:
        fig.suptitle(f'Particle Orbits ({n_orbits} orbits) - {vmec_name}', fontsize=16)
    else:
        energy_MeV = ds.attrs.get('energy_MeV', 3.5)
        fig.suptitle(f'Particle Orbit (3.5 MeV α) - {vmec_name}', fontsize=16)
    
    plt.tight_layout()
    
    # Save plot
    output_file = os.path.join(output_dir, f"{filename_prefix}_views.png")
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    print(f"Saved orbit views to: {output_file}")
    
    plt.close()
    
    # Create separate trajectory plots in flux coordinates
    create_flux_plots(ds, output_dir, filename_prefix)

def create_flux_plots(ds, output_dir, filename_prefix):
    """
    Create plots in flux coordinate space (s, theta, phi).
    """
    
    fig, axes = plt.subplots(2, 2, figsize=(12, 10))
    
    # Check if multiple orbits
    if 'orbit' in ds.dims:
        n_orbits = ds.sizes['orbit']
        colors = plt.cm.viridis(np.linspace(0, 1, n_orbits))
        
        for i in range(n_orbits):
            # Plot s vs time
            axes[0,0].plot(ds.time, ds.s[i], color=colors[i], alpha=0.7, linewidth=1)
            
            # Plot theta vs phi (Poincaré-like)
            axes[0,1].plot(ds.theta_vmec[i], ds.phi_vmec[i], color=colors[i], alpha=0.7, linewidth=1)
            
            # Plot theta vs time
            axes[1,0].plot(ds.time, ds.theta_vmec[i], color=colors[i], alpha=0.7, linewidth=1)
            
            # Plot phi vs time
            axes[1,1].plot(ds.time, ds.phi_vmec[i], color=colors[i], alpha=0.7, linewidth=1)
            
    else:
        # Single orbit
        # Plot s vs time
        axes[0,0].plot(ds.time, ds.s, 'b-', linewidth=2)
        
        # Plot theta vs phi (Poincaré-like)
        axes[0,1].plot(ds.theta_vmec, ds.phi_vmec, 'b-', linewidth=2)
        axes[0,1].plot(ds.theta_vmec[0], ds.phi_vmec[0], 'go', markersize=8, label='Start')
        axes[0,1].plot(ds.theta_vmec[-1], ds.phi_vmec[-1], 'ro', markersize=8, label='End')
        
        # Plot theta vs time
        axes[1,0].plot(ds.time, ds.theta_vmec, 'b-', linewidth=2)
        
        # Plot phi vs time
        axes[1,1].plot(ds.time, ds.phi_vmec, 'b-', linewidth=2)
    
    # Labels and titles
    axes[0,0].set_xlabel('Time [s]')
    axes[0,0].set_ylabel('s (normalized flux)')
    axes[0,0].set_title('Radial Evolution')
    axes[0,0].grid(True, alpha=0.3)
    
    axes[0,1].set_xlabel('θ [rad]')
    axes[0,1].set_ylabel('φ [rad]')
    axes[0,1].set_title('Poloidal-Toroidal Projection')
    axes[0,1].grid(True, alpha=0.3)
    if 'orbit' not in ds.dims:
        axes[0,1].legend()
    
    axes[1,0].set_xlabel('Time [s]')
    axes[1,0].set_ylabel('θ [rad]')
    axes[1,0].set_title('Poloidal Angle Evolution')
    axes[1,0].grid(True, alpha=0.3)
    
    axes[1,1].set_xlabel('Time [s]')
    axes[1,1].set_ylabel('φ [rad]')
    axes[1,1].set_title('Toroidal Angle Evolution')
    axes[1,1].grid(True, alpha=0.3)
    
    plt.tight_layout()
    
    # Save flux coordinate plots
    output_file = os.path.join(output_dir, f"{filename_prefix}_flux.png")
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    print(f"Saved flux coordinate plots to: {output_file}")
    
    plt.close()

def plot_latest_orbit():
    """
    Find and plot the most recent orbit file in run/ directory.
    """
    
    # Find most recent netCDF file
    orbit_files = glob.glob("run/orbit_trace*.nc")
    if not orbit_files:
        print("No orbit files found in run/ directory!")
        print("Run 'make run' first to generate orbit data.")
        return
    
    # Get the most recent file
    latest_file = max(orbit_files, key=os.path.getmtime)
    print(f"Plotting orbit data from: {latest_file}")
    
    # Load the data
    try:
        ds = xr.open_dataset(latest_file)
    except Exception as e:
        print(f"Error loading {latest_file}: {e}")
        return
    
    # Create filename prefix from input file
    base_name = os.path.splitext(os.path.basename(latest_file))[0]
    
    # Plot the orbits
    plot_orbit_views(ds, filename_prefix=base_name)
    
    # Close dataset
    ds.close()

if __name__ == "__main__":
    if len(sys.argv) > 1:
        # Plot specific file
        orbit_file = sys.argv[1]
        if not os.path.exists(orbit_file):
            print(f"Error: File '{orbit_file}' not found!")
            sys.exit(1)
        
        print(f"Plotting orbit data from: {orbit_file}")
        ds = xr.open_dataset(orbit_file)
        
        base_name = os.path.splitext(os.path.basename(orbit_file))[0]
        plot_orbit_views(ds, filename_prefix=base_name)
        
        ds.close()
    else:
        # Plot latest orbit file
        plot_latest_orbit()